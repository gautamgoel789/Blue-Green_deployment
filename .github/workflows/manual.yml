name: Blue-Green Secure Deployment to AKS

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: static-site
  IMAGE_TAG: green
  DOCKER_REPO: ${{ secrets.DOCKER_USERNAME }}/static-site

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v3

    - name: üîê Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üõ†Ô∏è Build Docker Image
      run: docker build -t $DOCKER_REPO:$IMAGE_TAG .

    - name: üõ°Ô∏è Trivy Scan - Image Vulnerability Check
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}
        format: table
        severity: CRITICAL,HIGH
        exit-code: 1

    - name: üì§ Push Docker Image
      run: docker push $DOCKER_REPO:$IMAGE_TAG

    - name: ‚öôÔ∏è Set up kubeconfig for AKS
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 -d > ~/.kube/config

    - name: ‚úÖ Verify Kubernetes Context
      run: |
        kubectl config current-context
        kubectl cluster-info
        kubectl get nodes

    - name: üîÅ Replace image in rollout.yaml
      run: |
        sed -i "s|image:.*|image: $DOCKER_REPO:$IMAGE_TAG|" rollout.yaml

    - name: üöÄ Apply rollout and services
      run: |
        kubectl apply -f services.yaml
        kubectl apply -f rollout.yaml

    - name: üì¶ Install Argo Rollouts CLI
      run: |
        curl -sLO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
        chmod +x kubectl-argo-rollouts-linux-amd64
        sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

    - name: ‚è≥ Wait for Falco to monitor runtime (10 mins)
      run: |
        echo "Monitoring runtime behavior with Falco..."
        sleep 600

    - name: üîé Check Falco Alerts
      id: falco-check
      run: |
        ALERTS=$(kubectl logs -l app=falco -n falco --tail=500 | grep -i "Warning" || true)
        if [[ -n "$ALERTS" ]]; then
          echo "Falco alerts found:"
          echo "$ALERTS"
          echo "::set-output name=found::true"
        else
          echo "No Falco alerts found."
          echo "::set-output name=found::false"
        fi

    - name: üîÑ Promote or Rollback Based on Falco
      run: |
        if [[ "${{ steps.falco-check.outputs.found }}" == "true" ]]; then
          echo "‚ö†Ô∏è Rolling back due to Falco alerts..."
          kubectl-argo-rollouts undo static-site
        else
          echo "‚úÖ Promoting green deployment..."
          kubectl-argo-rollouts promote static-site
        fi

    - name: üì£ Notify Microsoft Teams
      if: always()
      run: |
        curl -H 'Content-Type: application/json' -d '{
          "@type": "MessageCard",
          "@context": "https://schema.org/extensions",
          "summary": "AKS Blue-Green Deployment",
          "themeColor": "0076D7",
          "title": "üöÄ Deployment Status: ${{ job.status }}",
          "sections": [{
            "facts": [
              { "name": "App", "value": "${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}" },
              { "name": "Environment", "value": "Azure AKS" },
              { "name": "Status", "value": "${{ job.status }}" }
            ],
            "markdown": true
          }]
        }' ${{ secrets.MS_TEAMS_WEBHOOK }}
