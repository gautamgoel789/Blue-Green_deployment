name: Blue-Green Deployment to AKS with Promotion

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: static-site
  IMAGE_TAG: green
  DOCKER_REPO: ${{ secrets.DOCKER_USERNAME }}/static-site

jobs:

  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.digest.outputs.digest }}
    steps:
      - uses: actions/checkout@v3

      - name: 🔐 Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🛠️ Build Image
        run: docker build -t $DOCKER_REPO:$IMAGE_TAG .

      - name: 📤 Push Image
        run: docker push $DOCKER_REPO:$IMAGE_TAG

      - name: 🔍 Get Digest
        id: digest
        run: |
          docker pull $DOCKER_REPO:$IMAGE_TAG
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $DOCKER_REPO:$IMAGE_TAG)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT

  scan-image:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: 🛡️ Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}
          format: table
          severity: CRITICAL,HIGH
          exit-code: 1

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push, scan-image]
    steps:
      - uses: actions/checkout@v3

      - name: ⚙️ Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 -d > ~/.kube/config

      - name: 🔁 Inject image digest
        run: |
          sed -i "s|image:.*|image: ${{ needs.build-and-push.outputs.digest }}|" rollout.yaml

      - name: 🚀 Deploy rollout & service
        run: |
          kubectl apply -f services.yaml
          kubectl apply -f rollout.yaml

      - name: 📦 Install Argo Rollouts CLI
        run: |
          curl -sLO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x kubectl-argo-rollouts-linux-amd64
          sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

  promote-traffic:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: ⚙️ Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 -d > ~/.kube/config

      - name: 🕒 Wait Before Promotion
        run: |
          echo "⏳ Waiting for observation (manual or automated)..."
          sleep 60

      - name: ✅ Promote Green to Active
        run: kubectl-argo-rollouts promote static-site

  monitor-and-rollback:
    runs-on: ubuntu-latest
    needs: promote-traffic
    steps:
      - name: ⚙️ Setup kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 -d > ~/.kube/config

      - name: 🔍 Monitor Falco Alerts
        id: falco
        run: |
          sleep 10
          ALERTS=$(kubectl logs -l app=falco -n falco --tail=500 | grep -i "Warning" || true)
          if [[ -n "$ALERTS" ]]; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "⚠️ Falco alerts detected:"
            echo "$ALERTS"
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "✅ No Falco alerts."
          fi

      - name: 🔄 Rollback If Falco Alerts Found
        if: steps.falco.outputs.found == 'true'
        run: kubectl-argo-rollouts undo static-site

  notify:
    runs-on: ubuntu-latest
    needs: monitor-and-rollback
    if: always()
    steps:
      - name: 📢 Notify via MS Teams
        run: |
          curl -H 'Content-Type: application/json' -d '{
            "status": "${{ job.status }}",
            "app": "static-site",
            "environment": "Azure AKS"
          }' 'https://prod-22.centralindia.logic.azure.com:443/workflows/0d188668908c473595232ca44013a6b3/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=FK_gknItep5YhqxhpDlt0Jt8rgRuxbxc3fo1hNVsVm4'
