name: Blue-Green Secure Deployment to AKS

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: static-site
  IMAGE_TAG: green
  DOCKER_REPO: ${{ secrets.DOCKER_USERNAME }}/static-site

jobs:

  build-and-push:
    name: üë∑ Build & Push Image
    runs-on: ubuntu-latest

    steps:
    - name: üìÖ Checkout code
      uses: actions/checkout@v3

    - name: üîê Docker Login
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üõ†Ô∏è Build Docker Image
      run: docker build -t $DOCKER_REPO:$IMAGE_TAG .

    - name: üîç Get Image Digest
      id: digest
      run: |
        docker pull $DOCKER_REPO:$IMAGE_TAG
        DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $DOCKER_REPO:$IMAGE_TAG)
        echo "digest=$DIGEST" >> $GITHUB_OUTPUT


    - name: üì§ Push Image to Docker Hub
      run: docker push $DOCKER_REPO:$IMAGE_TAG


  scan-image:
    name: üõ°Ô∏è Trivy Image Scan
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: üõ°Ô∏è Run Trivy Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}
        format: table
        severity: CRITICAL,HIGH
        exit-code: 1


  deploy:
    name: üöÄ Deploy to AKS
    needs: [build-and-push, scan-image]
    runs-on: ubuntu-latest

    steps:
    - name: üëú Checkout code
      uses: actions/checkout@v3

    - name: ‚öôÔ∏è Set up kubeconfig for AKS
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 -d > ~/.kube/config

    - name: ‚úÖ Verify Kubernetes Context
      run: |
        kubectl config current-context
        kubectl cluster-info
        kubectl get nodes

    - name: üîÅ Replace image in rollout.yaml using digest
      run: |
        sed -i "s|image:.*|image: ${{ needs.build-and-push.outputs.digest }}|" rollout.yaml

    - name: üöÄ Apply rollout and services
      run: |
        kubectl apply -f services.yaml
        kubectl apply -f rollout.yaml

    - name: üì¶ Install Argo Rollouts CLI
      run: |
        curl -sLO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
        chmod +x kubectl-argo-rollouts-linux-amd64
        sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts


  falco-monitor:
    name: üîç Monitor with Falco
    needs: deploy
    runs-on: ubuntu-latest

    steps:
    - name: ‚è≥ Wait for Falco Runtime Check
      run: |
        echo "Monitoring runtime behavior with Falco..."
        sleep 6

    - name: üëÅÔ∏è Check Falco Logs
      id: falco-check
      run: |
        ALERTS=$(kubectl logs -l app=falco -n falco --tail=500 | grep -i "Warning" || true)
        if [[ -n "$ALERTS" ]]; then
          echo "Falco alerts found:"
          echo "$ALERTS"
          echo "found=true" >> $GITHUB_OUTPUT
        else
          echo "No Falco alerts found."
          echo "found=false" >> $GITHUB_OUTPUT

    - name: üîÑ Promote or Rollback Deployment
      run: |
        if [[ "${{ steps.falco-check.outputs.found }}" == "true" ]]; then
          echo "‚ö†Ô∏è Rolling back due to Falco alerts..."
          kubectl-argo-rollouts undo static-site
        else
          echo "‚úÖ Promoting deployment..."
          kubectl-argo-rollouts promote static-site


  notify:
    name: üì¢ Notify Microsoft Teams
    needs: falco-monitor
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: üì¢ Send Notification
      run: |
        curl -H 'Content-Type: application/json' -d '{
          "status": "${{ needs.falco-monitor.result }}",
          "app": "static-site",
          "environment": "Azure AKS"
        }' 'https://prod-22.centralindia.logic.azure.com:443/workflows/0d188668908c473595232ca44013a6b3/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=FK_gknItep5YhqxhpDlt0Jt8rgRuxbxc3fo1hNVsVm4'
