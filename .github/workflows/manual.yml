name: Blue-Green Secure Deployment to AKS

on:
  push:
    branches: [ main ]

env:
  IMAGE_NAME: static-site
  IMAGE_TAG: green
  DOCKER_REPO: ${{ secrets.DOCKER_USERNAME }}/static-site

jobs:

  build-and-push:
    name: 👷 Build & Push Image
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.digest.outputs.digest }}

    steps:
      - name: 📅 Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: 🛠️ Build Docker Image (no cache)
        run: docker build --no-cache -t $DOCKER_REPO:$IMAGE_TAG .

      - name: 📤 Push Image to Docker Hub
        run: docker push $DOCKER_REPO:$IMAGE_TAG

      - name: 🔍 Get Image Digest
        id: digest
        run: |
          docker pull $DOCKER_REPO:$IMAGE_TAG
          DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' $DOCKER_REPO:$IMAGE_TAG)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "📦 Image digest used: $DIGEST"

  scan-image:
    name: 🛡️ Trivy Image Scan
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: 🛡️ Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REPO }}:${{ env.IMAGE_TAG }}
          format: table
          severity: CRITICAL,HIGH
          exit-code: 1

  deploy:
    name: 🚀 Deploy to AKS
    needs: [build-and-push, scan-image]
    runs-on: ubuntu-latest

    steps:
      - name: 👜 Checkout code
        uses: actions/checkout@v3

      - name: ⚙️ Set up kubeconfig for AKS
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 -d > ~/.kube/config

      - name: 🔁 Replace image in rollout.yaml using digest
        run: |
          sed -i "s|image:.*|image: ${{ needs.build-and-push.outputs.digest }}|" rollout.yaml
          echo "✅ rollout.yaml after replacement:"
          cat rollout.yaml

      - name: 🚀 Apply rollout and services
        run: |
          kubectl apply -f services.yaml
          kubectl apply -f rollout.yaml

      - name: 📦 Install Argo Rollouts CLI
        run: |
          curl -sLO https://github.com/argoproj/argo-rollouts/releases/latest/download/kubectl-argo-rollouts-linux-amd64
          chmod +x kubectl-argo-rollouts-linux-amd64
          sudo mv kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts

  falco-monitor:
    name: 🔍 Monitor with Falco
    needs: deploy
    runs-on: ubuntu-latest
    outputs:
      found: ${{ steps.falco-check.outputs.found }}

    steps:
      - name: ⚙️ Set up kubeconfig for AKS
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 -d > ~/.kube/config

      - name: ⏳ Wait for Falco Runtime Check
        run: |
          echo "Monitoring runtime behavior with Falco..."
          sleep 10

      - name: 🔎 Check Falco Alerts
        id: falco-check
        run: |
          ALERTS=$(kubectl logs -l app=falco -n falco --tail=500 | grep -i "Warning" || true)
          if [[ -n "$ALERTS" ]]; then
            echo "⚠️ Falco alerts found:"
            echo "$ALERTS"
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "✅ No Falco alerts found."
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: 🔄 Promote or Rollback Deployment
        run: |
          if [[ "${{ steps.falco-check.outputs.found }}" == "true" ]]; then
            echo "Rolling back to previous (blue)..."
            kubectl-argo-rollouts undo static-site
          else
            echo "Promoting green to active..."
            kubectl-argo-rollouts promote static-site
          fi

  notify:
    name: 📢 Notify Microsoft Teams
    needs: falco-monitor
    if: always()
    runs-on: ubuntu-latest

    steps:
      - name: 📢 Send Notification
        run: |
          curl -H 'Content-Type: application/json' -d '{
            "status": "${{ needs.falco-monitor.result }}",
            "app": "static-site",
            "environment": "Azure AKS"
          }' 'https://prod-22.centralindia.logic.azure.com/...REDACTED...'  # your logic app URL
